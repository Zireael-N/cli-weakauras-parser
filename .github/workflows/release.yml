# Based on https://github.com/BurntSushi/ripgrep/blob/ffd4c9ccba0ffc74270a8d3ae75f11a7ba7a1a64/.github/workflows/release.yml

name: release
on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Create a directory for artifacts
        run: mkdir artifacts

      - name: Get the release version from the tag
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" | tee -a $GITHUB_ENV

      - name: Create a GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}

      - name: Save the release upload URL to an artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Save the version number to an artifact
        shell: bash
        run: echo "${{ env.VERSION }}" | sed "s/^v//" > artifacts/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, linux-musl, macos, win-msvc, win-gnu, win32-msvc, win32-gnu]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: linux-musl
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-latest
          rust: stable
          target: i686-pc-windows-msvc
        - build: win32-gnu
          os: windows-latest
          rust: stable
          target: i686-pc-windows-gnu

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Install Rust
      if: matrix.build != 'linux-musl'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Build a Docker image
      if: matrix.build == 'linux-musl'
      shell: bash
      run: |
        docker build -t alpine-builder -f .github/workflows/Dockerfile .

    - name: Get the release download URL
      uses: actions/download-artifact@v1
      with:
        name: artifacts
        path: artifacts

    - name: Set the release upload URL and release version
      shell: bash
      run: |
        echo "RELEASE_UPLOAD_URL=$(cat artifacts/release-upload-url)" | tee -a $GITHUB_ENV
        echo "RELEASE_VERSION=$(cat artifacts/release-version)" | tee -a $GITHUB_ENV

    - name: Build the release binary
      if: matrix.build != 'linux-musl'
      run: cargo build --verbose --release

    - name: Build the release binary (Docker)
      if: matrix.build == 'linux-musl'
      run: |
        CURRENT_USER=$(whoami)
        USER_ID=$(id -u $CURRENT_USER)
        GROUP_ID=$(id -g $CURRENT_USER)

        docker run --rm \
          -v "$PWD:/app:Z" \
          --workdir="/app" \
          alpine-builder \
          cargo build --verbose --release

        docker run --rm \
          -v "$PWD:/app:Z" \
          --workdir="/app" \
          alpine-builder \
          chown -R $USER_ID:$GROUP_ID target/

    - name: Strip the release binary
      if: matrix.build == 'linux' || matrix.build == 'linux-musl' || matrix.build == 'macos'
      run: |
        strip "target/release/cli_weakauras_parser"

    - name: Build an archive and print its SHA-512
      shell: bash
      run: |
        OUTPUT_DIR="cli_weakauras_parser-${{ env.RELEASE_VERSION }}-${{ matrix.target }}"
        mkdir -p "$OUTPUT_DIR"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/release/cli_weakauras_parser.exe" "$OUTPUT_DIR/"

          ASSET="$OUTPUT_DIR.zip"
          7z a "$ASSET" "$OUTPUT_DIR"
          echo "ASSET=$ASSET" | tee -a $GITHUB_ENV
        else
          cp "target/release/cli_weakauras_parser" "$OUTPUT_DIR/"

          ASSET="$OUTPUT_DIR.tar.gz"
          tar czf "$ASSET" "$OUTPUT_DIR"
          echo "ASSET=$ASSET" | tee -a $GITHUB_ENV
        fi

        if command -v sha512sum; then
          SHA512="$(sha512sum $ASSET | awk '{ print $1 }')"
        elif command -v shasum; then
          SHA512="$(shasum -a 512 $ASSET | awk '{ print $1 }')"
        elif command -v openssl; then
          SHA512="$(openssl dgst -sha512 $ASSET | awk '{ print $2 }')"
        fi
        echo "SHA-512 of $ASSET: ${SHA512:-N/A (sha512sum is not installed)}"

    - name: Upload the archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

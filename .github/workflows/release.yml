name: release

permissions:
  contents: write

on:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Create a GitHub release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create \
            ${{ github.ref_name }} \
            --repo ${{ github.event.repository.full_name }} \
            --verify-tag \
            --generate-notes

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, linux-musl, macos, macos-aarch64, win-msvc, win32-msvc]
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
        - build: linux-musl
          os: ubuntu-latest
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: macos-aarch64
          os: macos-latest
          rust: stable
          target: aarch64-apple-darwin
        - build: win-msvc
          os: windows-latest
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: win32-msvc
          os: windows-latest
          rust: stable
          target: i686-pc-windows-msvc

    steps:
    - name: Checkout the repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        persist-credentials: false

    - name: Install Rust
      if: matrix.build != 'linux-musl'
      uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # v1
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}

    - name: Build the release binary
      if: matrix.build != 'linux-musl'
      run: cargo build --verbose --release --target ${{ matrix.target }}

    - name: Build the release binary (Docker)
      if: matrix.build == 'linux-musl'
      run: |
        docker build -t alpine-builder -f .github/workflows/Dockerfile .

        CURRENT_USER=$(whoami)
        USER_ID=$(id -u $CURRENT_USER)
        GROUP_ID=$(id -g $CURRENT_USER)

        docker run --rm \
          -v "$PWD:/app:Z" \
          --workdir="/app" \
          alpine-builder \
          cargo build --verbose --release --target ${{ matrix.target }}

        docker run --rm \
          -v "$PWD:/app:Z" \
          --workdir="/app" \
          alpine-builder \
          chown -R $USER_ID:$GROUP_ID target/

    - name: Build an archive and print its SHA-512
      shell: bash
      run: |
        OUTPUT_DIR="cli_weakauras_parser-${{ github.ref_name }}-${{ matrix.target }}"
        mkdir -p "$OUTPUT_DIR"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp "target/${{ matrix.target }}/release/cli_weakauras_parser.exe" "$OUTPUT_DIR/"

          ASSET="$OUTPUT_DIR.zip"
          7z a "$ASSET" "$OUTPUT_DIR"
          echo "ASSET=$ASSET" | tee -a $GITHUB_ENV
        else
          cp "target/${{ matrix.target }}/release/cli_weakauras_parser" "$OUTPUT_DIR/"

          ASSET="$OUTPUT_DIR.tar.gz"
          tar czf "$ASSET" "$OUTPUT_DIR"
          echo "ASSET=$ASSET" | tee -a $GITHUB_ENV
        fi

        if command -v sha512sum; then
          SHA512="$(sha512sum $ASSET | awk '{ print $1 }')"
        elif command -v shasum; then
          SHA512="$(shasum -a 512 $ASSET | awk '{ print $1 }')"
        elif command -v openssl; then
          SHA512="$(openssl dgst -sha512 $ASSET | awk '{ print $2 }')"
        fi
        echo "SHA-512 of $ASSET: ${SHA512:-N/A (sha512sum is not installed)}"

    - name: Upload the archive
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload \
          ${{ github.ref_name }} \
          "${{ env.ASSET }}" \
          --repo ${{ github.event.repository.full_name }}
